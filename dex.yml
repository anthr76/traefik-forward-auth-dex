# A namespace for Dex to live in.
apiVersion: v1
kind: Namespace
metadata:
  name: dex
---
# Run Dex.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: dex
spec:
  # In a real scenario, consider the uptime requirements of things behind Dex authentication to decide how many replicas you need.
  # If also using it for Kubernetes authentication, you may want to use a DaemonSet instead for maximum redundancy.
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      # Give it Kubernetes API access for session data storage.
      serviceAccountName: dex
      containers:
      - name: dex
        image: quay.io/dexidp/dex:v2.24.0
        command: [/usr/local/bin/dex, serve, /cfg/config.yaml]
        ports:
        - containerPort: 5556
        envFrom:
        - secretRef:
            name: github-credentials
        volumeMounts:
        - name: config
          mountPath: /cfg
        - name: tls
          mountPath: /tls
      volumes:
      - name: config
        configMap:
          name: dex
      - name: tls
        secret:
          secretName: dex-tls
---
# Dex configuration file.
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    # This issuer URI must exactly match the one configured in traefik-forward-auth.
    issuer: https://dex.dex:5556/
    # WARNING THIS WILL NOT WORK FOR YOU. Pending https://github.com/dexidp/dex/pull/1722.
    # Until then you need to use a public-facing URL for `issuer` instead.
    publicURL: https://dex.lvh.me/

    # Store session data in Kubernetes custom objects so we don't need a database.
    storage:
      type: kubernetes
      config:
        inCluster: true

    web:
      https: 0.0.0.0:5556
      tlsCert: /tls/tls.crt
      tlsKey: /tls/tls.key

    # Here is where you would configure your authentication backend.
    # See https://github.com/dexidp/dex#connectors for a list of supported connectors.
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.lvh.me/callback

    oauth2:
      skipApprovalScreen: true

    # This is internal client config for traefik-forward-auth.
    staticClients:
    - name: Traefik Forward Auth
      id: forward-auth
      # An arbitrary secret value, make sure you change this if using this example
      # for real, and then put the matching value in forward-auth.yml too.
      secret: 6bbc3f2a6d55a3917e068dff5b07a476
      redirectURIs:
      - http://auth.lvh.me/_oauth
      - https://auth.lvh.me/_oauth
---
# TLS certificate for Dex itself, from local certificate authority.
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: dex-tls
  namespace: dex
spec:
  secretName: dex-tls
  issuerRef:
    kind: ClusterIssuer
    name: local-ca
  dnsNames:
  - dex
  - dex.dex
  - dex.dex.svc.cluster.local
---
# A service for both internal use and for the Ingress.
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  ports:
  # Use `https` as the port name so Traefik knows to use that for talking to the pod.
  - name: https
    port: 5556
  selector:
    app: dex
---
# Expose Dex to the internet for OAuth initiation and callbacks.
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: dex
  namespace: dex
spec:
  rules:
  - host: dex.lvh.me
    http:
      paths:
      - path: /
        backend:
          serviceName: dex
          servicePort: https
---
# A service account so Dex can connect to the Kubernetes API to store session management data.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: dex
---
# An RBAC role for use with the above service account.
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
rules:
# Read-write access to all of Dex's custom objects, used for session management.
- apiGroups: [dex.coreos.com] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
# Access to install the CRDs for Dex's custom objects.
- apiGroups: [apiextensions.k8s.io]
  resources: [customresourcedefinitions]
  verbs: [create]
---
# Bind the service account and the RBAC role together.
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex
  namespace: dex
